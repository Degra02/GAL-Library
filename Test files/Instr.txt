____________________________________________
                                            |
Inserire qui i file da testare e correggere,|
per poi essere implementati nella libreria  |
____________________________________________|


Matrice RiduzioneMatrice(Matrice *m, int riga, int colonna){
    Matrice md(m->nr - 1, m->nc - 1);

    int counterR = 0, counterC = 0;

    for (int i = 0; i < m->nr; i++){
        for (int j = 0; j < m->nc; j++){
            if (i != riga && j != colonna){
                if (counterC == md.nc){
                    counterC = 0;
                    counterR++;
                }
                md.mat[counterR][counterC++] = m->mat[i][j];
            }
        }
    }

    return md;
}

float det(Matrice *m){
    if (m->nc == m->nr && m->nc > 2){ 
        float d = 0.0;
        for (int i = 0; i < m->nr; i++){
            Matrice md = RiduzioneMatrice(m, i, 0);
            d += pow(-1, i) * m->mat[i][0] * det(&md); 
        }
        return d;

    } else {
        if (m->nc == 1) return m->mat[0][0];
        printf("%f\n", m->mat[1][1] * m->mat [1][1]);
        printf("%f\n", m->mat[0][1] * m->mat [1][0]);
        printf("%f\n", m->mat[0][0] * m->mat [1][1] - m->mat[0][1] * m->mat [1][0]);
        if (m->nc == 2) return  m->mat[0][0] * m->mat [1][1] - m->mat[0][1] * m->mat [1][0];
        return 0;
    }
} 



--------------------------------------------------------------------------

float det(Tmatrice *m, int car) {
    float determinante = 0.0;
    // Cardinalità uno
    if (car == 1) determinante = m->mat[0][0];
    // Cardinalità due
    if (car == 2)
        determinante = m->mat[1][1]*m->mat[0][0]-m->mat[0][1]*m->mat[1][0];
    // Cardinalità > 2
    else {
        for (int row = 0; row < car; row++) {
            // Istanzio la sotto-matrice
            Tmatrice sub_m = Tmatrice(m->nr, m->nc);
            sub_m.mat = new float*[sub_m.nr];
            for(int i = 0; i < sub_m.nr; i++){
                *(sub_m.mat + i) = new float[sub_m.nc];
            }
            // Sottomatrice di ordine car-1
            for (int i = 0; i < car-1; i++) {
                for (int j = 0; j < car-1; j++) {
                    int sub_row = (i < row ? i : i+1);
                    int sub_col = j+1;
                    sub_m.mat[i][j] = m->mat[sub_row][sub_col];
                }
            }
            // Segno sottomatrice + per pari, - per dispari
            if (row % 2 == 0)
             determinante += m->mat[row][0]*det(&sub_m, car-1);
            else
             determinante -= m->mat[row][0]*det(&sub_m, car-1);
        }
    }
    return determinante;
}